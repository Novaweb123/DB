CREATE DEFINER=`dbuser`@`%` PROCEDURE `stockandmanagement`.`sp_OrdersToFulfill`(IN p_start_date DATE, IN p_end_date DATE, IN p_user_id INT)
BEGIN
	DECLARE l_finished_curOrders 	 	INT DEFAULT FALSE;
	DECLARE l_finished_curOrdFulfill 	INT DEFAULT FALSE;
	-- DECLARE l_finished_curBlockStock INT DEFAULT FALSE;
	DECLARE curOrders_count				INT(11);
	DECLARE l_tran_id					INT(11);
	DECLARE l_trantype_id				INT(11);

	DECLARE l_order_count				INT(11);
	DECLARE l_line_id 					INT(11);
    DECLARE l_order_id					INT(11);
	DECLARE l_order_number 				VARCHAR(100);
	DECLARE l_order_date 				DATETIME;
	DECLARE l_order_status				VARCHAR(100);
	DECLARE l_customer_name				VARCHAR(100);
	DECLARE l_item_name					VARCHAR(1000);
	DECLARE l_item_sku					VARCHAR(100);
	DECLARE l_item_msku					VARCHAR(100);
	DECLARE l_order_qty					DECIMAL(10, 2);
	DECLARE l_pack_size					DECIMAL(10, 2);
	DECLARE l_total_item_qty			DECIMAL(10, 2);
	DECLARE l_total_item_unitprice		DECIMAL(10, 2);
	DECLARE l_delivery_state			VARCHAR(100);
	DECLARE l_delivery_region			VARCHAR(100);
	DECLARE l_delivery_region_id 		INT(11);
	DECLARE l_fulfill_from				VARCHAR(100);
	DECLARE l_fulfill_from_id			INT(11);

	DECLARE curOrders CURSOR FOR
		SELECT order_id, order_number, order_date, order_status, customer_name, delivery_state, delivery_region, delivery_region_id, 
				COUNT(*) AS order_count
		FROM tbl_orders_to_fulfill_tmp
		WHERE item_msku IS NOT NULL
		GROUP BY order_id, order_number, order_date, order_status, customer_name, delivery_state, delivery_region, delivery_region_id
		ORDER BY order_date, order_id, order_number;
	
	-- Cursor to handle items with in a order
	DECLARE curOrdFulfill CURSOR FOR
	SELECT line_id, customer_name, item_name, item_sku, item_msku, order_qty, pack_size, total_item_qty, fulfill_from, fulfill_from_id
	FROM tbl_orders_to_fulfill_tmp
	WHERE order_id = l_order_id
	-- AND order_number = l_order_number
	ORDER BY order_id, line_id;
	
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET l_finished_curOrders = TRUE;

	-- DECLARE CONTINUE HANDLER FOR NOT FOUND SET l_finished_curOrdFulfill = TRUE;

	DECLARE CONTINUE HANDLER FOR SQLSTATE '42S02' SET @err = 1;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
	END;
    
    SET @err = 0;
   
	DELETE FROM tbl_orders_to_fulfill_tmp
	WHERE user_id = p_user_id;
    
    INSERT INTO tbl_orders_to_fulfill_tmp (order_id, order_number, order_date, order_status, customer_name, item_name, item_sku, order_qty, item_unit_price, 
    		sales_channel, delivery_state, user_id)
    SELECT order_id, order_number, order_date, order_status, customer_name, item_name, SKU, quantity, unit_price, Channel, State, p_user_id
    FROM Unshipped_orders
    WHERE order_date BETWEEN p_start_date AND p_end_date
   	AND order_status = 'awaiting_shipment';

	-- SELECT COUNT(*) OrderLineCount FROM t_orders_to_fulfill;
    
    UPDATE tbl_orders_to_fulfill_tmp ord, Item_master im
    SET ord.item_msku = im.Seller_SKU,
		ord.pack_size = im.pack_size,
        ord.item_brand = im.Brand,
        ord.total_item_qty = ord.order_qty * im.pack_size
    WHERE ord.sales_channel = 680521
    -- AND ord.item_name = im.item_name
    AND ord.item_sku = im.Seller_SKU;

    UPDATE tbl_orders_to_fulfill_tmp ord, Amazon_pmc_item_master im
    SET ord.item_msku = im.MSKU,
		ord.pack_size = im.pack_size,
        ord.item_brand = im.Brand,
        ord.total_item_qty = ord.order_qty * im.pack_size
    WHERE ord.sales_channel = 517293
    -- AND ord.item_name = im.item_name
    AND ord.item_sku = im.sku;
    
    UPDATE tbl_orders_to_fulfill_tmp ord, Amazon_vsm_Item_master im
    SET ord.item_msku = im.MSKU,
		ord.pack_size = im.pack_size,
        ord.item_brand = im.Brand,
        ord.total_item_qty = ord.order_qty * im.pack_size
    WHERE ord.sales_channel = 680912
    -- AND ord.item_name = im.item_name
    AND ord.item_sku = im.sku;

    UPDATE tbl_orders_to_fulfill_tmp ord, Walmart_Item_master im
    SET ord.item_msku = im.MSKU,
		ord.pack_size = im.pack_size,
        ord.item_brand = im.Brand,
        ord.total_item_qty = ord.order_qty * im.pack_size
    WHERE ord.sales_channel = 680515
    -- AND ord.item_name = im.item_name
    AND ord.item_sku = im.sku;

    UPDATE tbl_orders_to_fulfill_tmp ord, Amazon_ca_item_master im
    SET ord.item_msku = im.MSKU,
		ord.pack_size = im.pack_size,
        ord.item_brand = im.Brand,
        ord.total_item_qty = ord.order_qty * im.pack_size
    WHERE ord.sales_channel = 684165
    -- AND ord.item_name = im.item_name
    AND ord.item_sku = im.sku;
   
    /*
    UPDATE tbl_orders_to_fulfill_tmp 
    SET total_item_qty = order_qty * pack_size;
    */
   
    UPDATE tbl_orders_to_fulfill_tmp ord, tbl_zone_store_mapping zones, tbl_location loc
    SET ord.delivery_region = zones.Zone,
    	ord.delivery_region_id = loc.LocationId
    WHERE ord.delivery_state = zones.State_code
   	AND zones.Zone = loc.LocationName;

   	-- If Delivery Region is NULL then the default Fulfillment Center is Haridwar
	UPDATE tbl_orders_to_fulfill_tmp
	SET fulfill_from = 'Haridwar',
		fulfill_from_id = 17
	WHERE delivery_region IS NUll;
   
   /*
    UPDATE tbl_orders_to_fulfill_tmp ord, Inventory stk, tbl_location loc
    SET ord.richmond_stock = stk.Available_Qty
    	-- , ord.fulfill_from_id = loc.LocationId
    WHERE ord.item_msku = stk.MSKU
    AND stk.Location = loc.LocationId
   	AND loc.LocationName = 'Richmond';
    
    UPDATE tbl_orders_to_fulfill_tmp ord, Inventory stk, tbl_location loc
    SET ord.hyderabad_stock = stk.Available_Qty
    	-- , ord.fulfill_from_id = loc.LocationId
    WHERE ord.item_msku = stk.MSKU
    AND stk.Location  = loc.LocationId
   	AND loc.LocationName = 'Hyderabad';
    
    UPDATE tbl_orders_to_fulfill_tmp ord, Inventory stk, tbl_location loc
    SET ord.haridwar_stock = stk.Available_Qty
    	-- , ord.fulfill_from_id = loc.LocationId
    WHERE ord.item_msku = stk.MSKU
    AND stk.Location  = loc.LocationId
   	AND loc.LocationName = 'Haridwar';
    
    UPDATE tbl_orders_to_fulfill_tmp ord, Inventory stk, tbl_location loc
    SET ord.belmont_stock = stk.Available_Qty
    	-- , ord.fulfill_from_id = loc.LocationId
    WHERE ord.item_msku = stk.MSKU
    AND stk.Location = loc.LocationId
   	AND loc.LocationName = 'Belmont';
   	*/

/*
Approach

1. Group the records by CUstomer, Item and Order Number (sequence is quite important, there are instances where same item is ordered by 
	same customer multiple times.  We need to group the order by customer
*/

   	/*
	WITH ItemsOrdered (MSKU, item_name, Available_Qty, location, order_qty, pack_size, total_item_qty) AS
	(	SELECT inv.MSKU, inv.item_name, inv.available_qty, inv.LOCATION, ord.order_qty, ord.pack_size, ord.total_item_qty
		FROM Inventory inv INNER JOIN tbl_orders_to_fulfill_tmp ord
		on inv.msku = ord.item_msku
	)
	SELECT * FROM ItemsOrdered;
	*/

	SELECT trantype_id INTO l_trantype_id
	FROM tbl_trantype_master ttm 
	WHERE 1 = 1
	AND trantype_name = 'BLOCK_STOCK';
	
	INSERT INTO tbl_inventory_hdr (tran_date, trantype_id, remarks, created_by, created_on)
	SELECT DATE(NOW()), l_trantype_id, concat('Blocking stock for orders as on ', now()), 1, now();

	SELECT LAST_INSERT_ID() INTO l_tran_id;

	OPEN curOrders;
	-- To check how many records got effected last statemet (here number of records in cursor curOrders)
	-- SELECT FOUND_ROWS() into curOrders_count;

	-- SELECT 'Records in curOrders cursor', curOrders_count;
		
	curOrdersLoop:
	LOOP
	
		FETCH curOrders INTO l_order_id, l_order_number, l_order_date, l_order_status, l_customer_name, l_delivery_state, l_delivery_region, 
							l_delivery_region_id, l_order_count;
							
		IF l_finished_curOrders = TRUE THEN
			CLOSE curOrders;
			LEAVE curOrdersLoop;
		END IF;
	
		-- SELECT 'l_order_id is ', l_order_id;
	
		ORDER_BLOCK: BEGIN
		
			OPEN curOrdFulfill;
			-- To check how many records got effected last statemet (here number of records in cursor curOrdFulfill)
			SELECT FOUND_ROWS() into curOrders_count;
		
			curOrdFulfillLoop:
			LOOP
				FETCH curOrdFulfill INTO l_line_id, l_customer_name, l_item_name, l_item_sku, l_item_msku, l_order_qty, l_pack_size, l_total_item_qty, 
						l_fulfill_from, l_fulfill_from_id;
				
				IF l_finished_curOrders = TRUE THEN
					set l_finished_curOrders := FALSE;
					CLOSE curOrdFulfill;
					LEAVE curOrdFulfillLoop;
				END IF;
			
				/*
				SELECT l_order_id, l_order_number, l_order_date, l_order_status, l_customer_name, l_delivery_state, l_delivery_region, l_order_count
						l_line_id, l_customer_name, l_item_name, l_item_sku, l_item_msku, l_order_qty, l_pack_size, l_total_item_qty, l_fulfill_from
						l_fulfill_from_id;
				*/
			
				-- For orders whose delivery location and store location is same
				UPDATE tbl_orders_to_fulfill_tmp ord, Inventory inv, tbl_location tl 
				SET ord.fulfill_from_id = inv.Location,
					ord.fulfill_from = tl.LocationName,
					inv.Blocked_Qty = inv.Blocked_Qty + ord.total_item_qty,
					inv.Available_Qty = inv.Available_Qty - ord.total_item_qty
				WHERE 1 = 1
				AND ord.order_id = l_order_id
				AND ord.line_id = l_line_id
				AND ord.item_name = l_item_name
				AND ord.item_sku = l_item_sku
				AND ord.item_msku = l_item_msku
				AND ord.delivery_region_id = inv.Location
				AND inv.MSKU = l_item_msku
				AND inv.Available_Qty >= ord.total_item_qty
				AND inv.Location = tl.LocationId;
			
				-- Only when stock in blocked update the unshipped orders table order_status
				IF found_rows() > 0 THEN
					UPDATE Unshipped_orders 
					SET order_status = 'quantity_blocked'
					WHERE 1 = 1
					AND order_id = l_order_id
					AND order_number = l_order_number
					AND item_name = l_item_name
					AND sku = l_item_sku
					AND msku = l_item_msku
					AND order_status = 'awaiting_shipment';
				
					SELECT ord.fulfill_from_id, ord.total_item_qty, ord.item_unit_price 
					INTO l_fulfill_from_id, l_total_item_qty, l_total_item_unitprice		
					FROM tbl_orders_to_fulfill_tmp ord
					WHERE 1 = 1
					AND ord.line_id = l_line_id
					AND ord.order_id = l_order_id
					AND ord.line_id = l_line_id
					AND ord.item_name = l_item_name
					AND ord.item_sku = l_item_sku
					AND ord.item_msku = l_item_msku;
				
					INSERT INTO tbl_inventory_det(tran_id, trantype_id, ref_tran_id, ref_tran_number, order_date, location_id, item_msku, item_name,
									tran_qty, unit_price, tran_status, created_by, created_on)
					VALUES(l_tran_id, l_trantype_id, l_order_id, l_order_number, l_order_date, l_fulfill_from_id, l_item_msku, l_item_name,
									l_total_item_qty, l_total_item_unitprice, 'BLOCK_STOCK', 1, now());
				END IF;
				
				/*
				-- For orders whose delivery location and store location is different
				UPDATE t_orders_to_fulfill ord, Inventory inv
				SET ord.fulfill_from_id = inv.Location,
					-- ord.fulfill_from = inv.LocationName,
					inv.Blocked_Qty = inv.Blocked_Qty + ord.total_item_qty,
					inv.Available_Qty = inv.Available_Qty - ord.total_item_qty
				WHERE 1 = 1
				AND ord.order_id = l_order_id
				AND ord.line_id = l_line_id
				AND ord.item_name = l_item_name
				AND ord.item_sku = l_item_sku
				AND ord.item_msku = l_item_msku
				AND ord.delivery_region_id = inv.Location
				AND inv.MSKU = l_item_msku
				AND inv.Available_Qty >= ord.total_item_qty;
				 
				SELECT Available_Qty
				FROM Inventory i 
				WHERE 1 = 1
				AND i.Location 
				
				UPDATE t_orders_to_fulfill
				SET fulfill_from = l_delivery_region
				WHERE delivery_region = l_delivery_region
			    AND belmont_stock >= total_item_qty;
			
				UPDATE t_orders_to_fulfill
				SET fulfill_from = 'Richmond'
				WHERE delivery_region = 'Richmond'
			    AND richmond_stock >= total_item_qty;
			    */
		
			END LOOP curOrdFulfillLoop;
		
		END ORDER_BLOCK;
    
	END LOOP curOrdersLoop;
		
    SELECT * 
    FROM tbl_orders_to_fulfill_tmp
   	WHERE 1 = 1
    AND user_id = p_user_id;
  	-- AND fulfill_from IN ('Richmond', 'Belmont');
    -- and pack_size <> 1;

    -- DROP TEMPORARY TABLE t_orders_to_fulfill;
END;
